/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.komo

import com.komo.model.*
import freemarker.cache.ClassTemplateLoader
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.freemarker.FreeMarker
import io.ktor.freemarker.FreeMarkerContent
import io.ktor.http.Parameters
import io.ktor.request.receiveParameters
import io.ktor.response.respond
import io.ktor.routing.get
import io.ktor.routing.post
import io.ktor.routing.route
import io.ktor.routing.routing
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import org.jetbrains.exposed.sql.Database

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

"mongodb+srv://glenn.layaar@ovo.id:UltraS3cur3!@cluster0-9tr6k.gcp.mongodb.net/test?retryWrites=true&w=majority"

val dao = DAOFacadeDatabase(Database.connect("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1", driver = "org.h2.Driver"))

fun main(args: Array<String>) {
    embeddedServer(Netty, port = 8080) {
        dao.init()
        install(FreeMarker) {
            templateLoader = ClassTemplateLoader(this::class.java.classLoader, "templates")
        }
        routing {
            route("/") {
                get {
                    call.respond(FreeMarkerContent("index.ftl"))
                }
            }
            route("{path...}") {
                get("/") {
                    val action = call.parameters.getAll("path")?.joinToString(separator = "/")
                    if(action != null) {
                        //TODO: implement logic
                    }
                }
            }
            route("/users/edit") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        call.respond(FreeMarkerContent("user_edit.ftl",
                                mapOf("user" to dao.getUser(id),
                                        "apis" to dao.getAllApis())))
                    }
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()
                    val id = postParameters["id"]
                    if (id != null) {

                        val userApiStates = postParameters.getAll("ApiState")?.map {
                            val component = it.split(";").toTypedArray()
                            UserApiState(component[0], component[1])
                        }

                        val updateUser = User(id, postParameters["username"].orEmpty(),
                                postParameters["password"].orEmpty(),
                                postParameters["name"].orEmpty(),
                                UserToken(postParameters["token"].orEmpty()),
                                userApiStates)

                        dao.updateUser(updateUser)
                    }
                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/users/new") {
                get {
                    call.respond(FreeMarkerContent("user_edit.ftl",
                            mapOf("apis" to dao.getAllApis())))
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()

                    val id = "sadadaswd"//TODO: GenerateId

                    val userApiStates = postParameters.getAll("ApiState")?.map {
                        val component = it.split(";").toTypedArray()
                        UserApiState(component[0], component[1])
                    }

                    val newUser = User(id, postParameters["username"].orEmpty(),
                            postParameters["password"].orEmpty(),
                            postParameters["name"].orEmpty(),
                            UserToken(postParameters["token"].orEmpty()),
                            userApiStates)

                    dao.createUser(newUser)

                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("users/delete") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        dao.deleteUser(id)
                        call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                    }
                }
            }
            route("users") {
                get {
                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/apis/edit") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        call.respond(FreeMarkerContent("api_edit.ftl",
                                mapOf("api" to dao.getApi(id))))
                    }
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()
                    val id = postParameters["id"]
                    if (id != null) {

                        val apiResponses = postParameters.getAll("apiResponse").map {
                            val component = it.split("#@$#").toTypedArray()
                            ApiResponse(component[0], component[1])
                        }

                        val updateApi = Api(id, postParameters["name"].orEmpty(),
                                apiResponses)

                        dao.updateApi(updateApi)
                    }
                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }
            route("/apis/new") {
                get {
                    call.respond(FreeMarkerContent("api_edit.ftl"))
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()

                    val id = "sadadaswd"//TODO: GenerateId

                    val apiResponses = postParameters.getAll("ApiResponse").map {
                        val component = it.split("#@$#").toTypedArray()
                        ApiResponse(component[0], component[1])
                    }

                    val newApi = Api(id, postParameters["name"].orEmpty(),
                            apiResponses)

                    dao.createApi(newApi)

                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }
            route("apis/delete") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        dao.deleteApi(id)
                        call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                    }
                }
            }
            route("apis") {
                get {
                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }
        }

        Unit
    }.start(wait = true)
}
