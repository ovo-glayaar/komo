/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.komo

import com.komo.model.*
import freemarker.cache.ClassTemplateLoader
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.freemarker.FreeMarker
import io.ktor.freemarker.FreeMarkerContent
import io.ktor.http.ContentType
import io.ktor.http.Parameters
import io.ktor.http.content.TextContent
import io.ktor.http.content.files
import io.ktor.http.content.static
import io.ktor.request.receiveParameters
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.get
import io.ktor.routing.post
import io.ktor.routing.route
import io.ktor.routing.routing
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import org.jetbrains.exposed.sql.Database

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

val dao = DAOFacadeDatabase(Database.connect("jdbc:postgresql://john.db.elephantsql.com:5432/ehhtftpv",
        driver = "org.postgresql.Driver", user = "ehhtftpv", password = "Q5FO8evgZ7RV_Jz708vpdwakG7sWSnhF"))

fun main(args: Array<String>) {
    embeddedServer(Netty, port = 8080) {
        dao.init()

        install(FreeMarker) {
            templateLoader = ClassTemplateLoader(this::class.java.classLoader, "templates")
        }

        routing {

            route("/") {
                get {
                    val params = mapOf("title" to "Main Page", "header" to "Main Page")
                    call.respond(FreeMarkerContent("index.ftl", params, ""))
                    //call.respondText("HELLO WORLD")
                }
            }
            route("/users/edit") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        call.respond(FreeMarkerContent("user_edit.ftl",
                                mapOf("user" to dao.getUser(id.toInt()),
                                      "apis" to dao.getAllApis())))
                    }
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()
                    val id = postParameters["id"]
                    if (id != null) {

                        dao.updateUser(id.toInt(),
                                postParameters["username"].orEmpty(),
                                postParameters["password"].orEmpty(),
                                postParameters["name"].orEmpty(),
                                "",
                                postParameters.getAll("ApiState")?.map { it.toInt() }?.toList() ?: listOf())

                    }
                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/users/new") {
                get {
                    call.respond(FreeMarkerContent("user_edit.ftl",
                            mapOf("apis" to dao.getAllApis())))
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()

                    dao.createUser(postParameters["username"].orEmpty(),
                            postParameters["password"].orEmpty(),
                            postParameters["name"].orEmpty(),
                            postParameters.getAll("ApiState")?.map { it.toInt() }?.toList() ?: listOf())

                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("users/delete") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        dao.deleteUser(id.toInt())
                        call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                    }
                }
            }
            route("users") {
                get {
                    call.respond(FreeMarkerContent("users.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/apis/edit") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        call.respond(FreeMarkerContent("api_edit.ftl",
                                mapOf("api" to dao.getApi(id.toInt()))))
                    }
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()
                    val id = postParameters["id"]
                    if (id != null) {
                        dao.updateApi(id.toInt(),
                                postParameters["name"].orEmpty(),
                                postParameters["url"].orEmpty(),
                                postParameters.getAll("apiResponse") ?: listOf())
                    }
                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }
            route("/apis/new") {
                get {
                    call.respond(FreeMarkerContent("api_edit.ftl", null))
                }
                post {
                    val postParameters: Parameters = call.receiveParameters()
                    dao.createApi(postParameters["name"].orEmpty(),
                            postParameters["url"].orEmpty(),
                            postParameters.getAll("apiResponse") ?: listOf())

                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }
            route("apis/delete") {
                get {
                    val id = call.request.queryParameters["id"]
                    if (id != null) {
                        dao.deleteApi(id.toInt())
                        call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                    }
                }
            }
            route("apis") {
                get {
                    call.respond(FreeMarkerContent("apis.ftl", mapOf("apis" to dao.getAllApis())))
                }
            }

            route("{path...}") {
                get("/") {
                    val action = call.parameters.getAll("path")?.joinToString(separator = "/")
                    if(action != null) {

                        val token = call.request.headers.get("Authorization")
                        val sessionId = call.request.headers.get("cs-session-id")
                        //dao.getApiByUrl(action)
                        //TODO: implement logic
                        call.respond(TextContent("{\"action\": \"$action\"}", ContentType.Application.Json))
                    }
                }
            }

        }

        Unit
    }.start(wait = true)
}
